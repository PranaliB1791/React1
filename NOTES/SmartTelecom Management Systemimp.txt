SmartTelecom Management Systemgeureka 8067gateway 8080auth service 9001user service :9002plan service 9003recharge service:9004usage-service 9005billing-service 9006---1. Eureka Server(geureka 8067)· Service discovery for dynamic routing of microserviceshttp://localhost:8067---2. API Gateway(gateway 8080)· Routes requests to appropriate microservices· JWT validation at gateway levelhttp://localhost:8080---3. Authentication Service(auth service 9001)· User login & registration· Password encryption using BCryptPasswordEncoder· JWT token generation· Role-based access: Admin / Customerhttp://localhost:8080login() and register()POST http://localhost:8080/auth/loginADMIN:login{     "email": "ram@gmail.com",  "password": "1234"}---CUSTOMERPOST http://localhost:8080/auth/register{  "name": "Sai",  "email": "sai@gmail.com",  "password": "1234",  "phone": "8877543210",  "role": "CUSTOMER"}---eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyZWVuYUBnbWFpbC5jb20iLCJyb2xlcyI6WyJBRE1JTiJdLCJpYXQiOjE3NTMyMDE3NTcsImV4cCI6MTc1MzIzNzc1N30.aRs9xhNOFH7Omh7HY1QWMroyaJDZBefKBl3bbskwH9s===============================================================4.User Service(user service :9002)· CRUD for customer profiles· Update mobile plans· Get plan usage summaryid is the PKPOST http://localhost:8080/users{  "name": "Sai",  "email": "sai@gmail.com",  "mobile": "8877543210"}GET http://localhost:8080/usersGET http://localhost:8080/users/{id}---EXPH===============================================================5.plan-service(plan service 9003)POST: http://localhost:8080/plansGET: http://localhost:8080/plansGET: http://localhost:8080/plans/{id}PUT: http://localhost:8080/plans/{id}DELETE: http://localhost:8080/plans/{id}private Long id; 	@Column(nullable = false, unique = true) 	private String planName; 	@Column(nullable = false) 	private double price; 	@Column(nullable = false) 	private int validityInDays;=================================================================================6.recharge-service:(recharge service:9004):user-serviceuser tableuser-serviceuser table| id | email                                           | mobile     | name     || -- | ----------------------------------------------- | ---------- | -------- || 1  | [madan@gmail.com](mailto:madan@gmail.com)       | 9876543210 | Madan    || 2  | [chandu@gmail.com](mailto:chandu@gmail.com)     | 7776543210 | Chandu   || 3  | [chitti@gmail.com](mailto:chitti@gmail.com)     | 7776543210 | Chitti   || 4  | [maithili@gmail.com](mailto:maithili@gmail.com) | 7898654323 | Maithili |plan-serviceplan tableplan-serviceplan table| id | data\_limit | description                                        | plan\_name          || -- | ----------- | -------------------------------------------------- | ------------------- || 1  | 2GB/day     | Best plan with daily 2GB data and unlimited calls  | Unlimited Data Plan || 2  | 1GB/day     | Affordable plan with 1GB per day and limited calls | Budget Data Plan    || 3  | 3GB/day     | Annual plan with max data and premium support      | Premium Annual Plan |recharge-servicerecharge tableid      cstomer_id plan_id recharge_date1	11	111	"02-06-2025"2	22	222	"17-03-2025"3	33	333	"13-05-2025"4	44	444	"22-06-2025"---userId: 1 exists in user-serviceplanId: 1 exists in plan-servicePOST http://localhost:8080/rechargesContent-Type: application/json{  "userId": 1,  "planId": 1}No need to send rechargeDate — backend will set it to today’s date. 4. GET /recharges/{id}Get recharge by recharge ID.GET http://localhost:8080/recharges/1--- 5.  GET /recharges/user/{userId}Get all recharges done by a specific user.GET http://localhost:8080/recharges/user/1---6. GET /recharges/plan/{planId}Get all recharges for a specific plan.GET http://localhost:8080/recharges/plan/101---get : http://localhost:8080/recharges/recharges?role=CUSTOMERget http://localhost:8080/recharges/recharges?role=ADMIN======================================================================6.Usage-service:· Tracks call/data usage per customer· Saves data in MongoDB· Simulates logs via scheduled multithreaded jobsPOST:Set Method and URL:Choose POST.If using Gateway:http://localhost:8080/usagesIf calling usage-service directly:http://localhost:9005/usages{  "userId": 1,  "planId": 2,  "callMinutes": 100,  "dataUsageInGB": 1.5,  "smsCount": 15}Key: AuthorizationValue: Bearer <your-JWT-token>---GET:Gateway: http://localhost:8080/usages/user/1Direct: http://localhost:9005/usages/user/1Key: AuthorizationValue: Bearer <your-jwt-token>================================================================7.billing-service 90061.admin only :POST http://localhost:8080/billing/generate/1POST http://localhost:8080/billing/generate/{userId}token2. Get Billing History (Admin or Customer)GET http://localhost:8080/billing/history?userId={userId}http://localhost:8080/billing/history?userId=1token3. Get Specific BillURL:GET http://localhost:8080/billing/{billId}Example:http://localhost:8080/billing/10token4. List All Bills (Admin Only)URL:GET http://localhost:8080/billing/allHeaders:Authorization: Bearer <ADMIN_JWT_TOKEN>5. Delete a Bill (Admin Only)URL:DELETE http://localhost:8080/billing/{billId}Example:http://localhost:8080/billing/10token================================================================7. Billing Service· Generates bills at the end of month· Retrieves usage logs from MongoDB· Applies charges based on subscribed plan· Sends notifications (simulated)ADMIN:login{     "email": "ram@gmail.com",  "password": "1234"}---CUSTOMERPOST http://localhost:8080/auth/register{  "name": "Sai",  "email": "sai@gmail.com",  "password": "1234",  "phone": "8877543210",  "role": "CUSTOMER"}================================================login as adminPOST http://localhost:8080/auth/login{     "email": "reena@gmail.com",  "password": "password"}---login as customerPOST http://localhost:8080/auth/login{    "email": "sai@gmail.com",  "password": "1234"}====================================================================================Exception handling:get : http://localhost:8080/users/20exceptin handle{    "message": "Plan not found with id: 20",    "timestamp": "2025-07-22T22:28:54.1516727",    "status": 500}get : http://localhost:8080/plans/20{    "message": "Plan not found with id: 22",    "timestamp": "2025-07-22T22:32:08.9812408",    "status": 500}